var e,t={d:(e,s)=>{for(var i in s)t.o(s,i)&&!t.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:s[i]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)},s={};t.d(s,{Z:()=>n}),function(e){e.PENDING="pending",e.FULFILLED="fulfilled",e.REJECTED="rejected"}(e||(e={}));class i{onFulfilledCallbacks=[];onRejectedCallbacks=[];state=e.PENDING;value;_isMyPrimiseDecided(){return this.state!==e.PENDING}_resolvePromiseImpl=t=>{this.value=t,this.state=e.FULFILLED,this.onFulfilledCallbacks.forEach((e=>{e()}))};_rejectPromiseImpl=t=>{this.value=t,this.state=e.REJECTED,this.onRejectedCallbacks.forEach((e=>{e()}))};_resolvePromise(e){this._isMyPrimiseDecided()||(i._duckTest(e)?i.resolve(e).then(this._resolvePromiseImpl,this._rejectPromiseImpl):this._resolvePromiseImpl(e))}_rejectPromise(e){this._isMyPrimiseDecided()||this._rejectPromiseImpl(e)}constructor(e){try{e(this._resolvePromise.bind(this),this._rejectPromise.bind(this))}catch(e){this._rejectPromise(e)}}then(t=(e=>e),s=(e=>{throw e})){return new i(((n,r)=>{const l=(l=e.FULFILLED)=>{queueMicrotask(function(){try{const h=l===e.FULFILLED?t(this.value):s(this.value);if(this===h)throw new Error("then方法不能返回当前MyPromise对象！");i._duckTest(h)?i._handleThenable(h,n,r):n(h)}catch(e){r(e)}}.bind(this))};this._isMyPrimiseDecided()?l(this.state):(this.onFulfilledCallbacks.push(l.bind(this,e.FULFILLED)),this.onRejectedCallbacks.push(l.bind(this,e.REJECTED)))}))}catch(e=(()=>{})){return this.then((e=>e),(t=>{e(t)}))}finally(e=(()=>{})){this.then((()=>{e()}),(()=>{e()}))}static _duckTest(e){return e&&("function"==typeof e||"object"==typeof e)&&"function"==typeof e.then}static _handleThenable(e,t,s){return e instanceof i?e.then(t,s):"function"==typeof e.then?e.then((e=>{i._handleThenable(e,t,s)}),(e=>{s(e)})):t(e)}static resolve(e){return i._duckTest(e)?new i(((t,s)=>{i._handleThenable(e,t,s)})):new i((t=>{t(e)}))}static reject(e){return new i(((t,s)=>{s(e)}))}static all(e){const t=[];let s=0;return new i(((i,n)=>{for(let r=0;r<e.length;r++)e[r].then((n=>{t[r]=n,++s===e.length&&i(t)}),(()=>{n()}))}))}static any(e){const t=[];let s=0;return new i(((i,n)=>{for(let r=0;r<e.length;r++)e[r].then((e=>{i(e)}),(i=>{t[r]=i,++s===e.length&&n(t)}))}))}static race(e){return new i(((t,s)=>{e.forEach((e=>{e.then(t,s)}))}))}static allSettled(t){const s=[];let n=0;return new i((i=>{for(let r=0;r<t.length;r++)t[r].then((l=>{s[r]={status:e.FULFILLED,value:l},++n===t.length&&i(s)}),(l=>{s[r]={status:e.REJECTED,value:l},++n===t.length&&i(s)}))}))}}const n=i;var r=s.Z;export{r as default};